{
  "hash": "37c46275272ea3044700fefc925a7981",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"11130826\"\n---\n\n\n\n\nRecently, I went to push a large website to GitHub pages as an interim step to finalizing it.  Deploying websites is more time-consuming than I would like so only a portion of the website was deployed.  The site relies on some java script libraries.  I'd run into GitHub's large file size error before but managed to push through it.  This time, however, proved to be trickier.  This time the files were part of a larger quarto project.  This post describes the interaction between quarto, git, gitHub, and large files.\n\n## Quarto\n\nThe quarto documentation is always a helpful place to start. They describe how to deploy a website using three methods.  The first method was the only one that I'd ever tried and it worked great.  With that option, you have the quarto website publish to a `/docs` folder and then finish setting it up in the settings portion of GitHub.  For a large site, this seemed really cumbersome a different option was appealing.  The second options is referred to as the \"Publish Command\". The site is deployed on the `gh-pages` branch.  The three steps are (1) set the `gh-pages` as the source branch, (2) add output to the .gitignore file, (3) publish the site. (More on this below.)\n\n### gh-pages branch\n\nUse the following commands to set up the `gh-pages` branch, but only if you've not already done it in the settings of the remote GitHub settings page.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit checkout --orphan gh-pages\ngit reset --hard # make sure all changes are committed before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\n```\n:::\n\n\n\n\n\n### Add output to .gitignore\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n/.quarto/\n/_site/\n_freeze/ # I also added the _freeze folder\n```\n:::\n\n\n\n\n\nIf you've indavertently added the `_site` folder to the repository, you can remove it with the following command.  `_site` is the default output directory in quarto.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit rm -r _site\n```\n:::\n\n\n\n\n\n\n\n\n\n\n## Helpful Links\n\n- [Publishing Github Pages](https://quarto.org/docs/publishing/github-pages.html#publish-command)\n\n- [git still shows files as modified after adding to .gitignore](https://stackoverflow.com/questions/9750606/git-still-shows-files-as-modified-after-adding-to-gitignore)\n\n- [_freeze](https://quarto.org/docs/projects/code-execution.html#freeze) Note that freeze controls whether execution occurs during global project renders.\n\n## `gh-pages` Setup\n\n\n## Large Files\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndm <- matrix(rnorm(1.5e7), ncol = 1e3)\ndf <- data.frame(dm)\nsaveRDS(df, \"./large_file.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.info(\"./large_file.rds\")$size \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 115183719\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readRDS(\"./large_file.rds\")\ndf[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          X1          X2          X3         X4          X5\n1  0.4083431  0.07777729  0.92423052  0.7948746 -0.03773728\n2  0.3869934 -0.25004690  0.08860456  0.3931170 -1.03043224\n3  1.8689547  0.05479597 -0.28243301 -1.2554677 -1.77354544\n4 -1.2419750 -1.10902225  0.07764901 -0.3275211  0.70127439\n5 -1.6701076  1.50371222 -0.53877402  0.8203475  1.54399150\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"./error_large_file.png\")\n```\n\n::: {.cell-output-display}\n![](./error_large_file.png)\n:::\n:::\n\n\n\n\n\n## Install LFS\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"./install_lfs.png\")\n```\n\n::: {.cell-output-display}\n![](./install_lfs.png)\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit lfs track \"large_file.rds\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"./track_lfs_file.png\")\n```\n\n::: {.cell-output-display}\n![](./track_lfs_file.png)\n:::\n:::\n\n\n\n\nShow new .gitattributes file\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"./new_gitattributes_file.png\")\n```\n\n::: {.cell-output-display}\n![](./new_gitattributes_file.png)\n:::\n:::\n\n\n\n\n\nAdded\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nlarge_file.rds filter=lfs diff=lfs merge=lfs -text\n```\n:::\n\n\n\n\nAdd the .gitattributes file with\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add .gitattributes\n```\n:::\n\n\n\n\n## Caching \n\nSo you'll keep getting errors unless you remove the files from the cache. See SO question:  [Git error, need to remove large file](https://stackoverflow.com/questions/33360043/git-error-need-to-remove-large-file)\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit rm --cached giant_file\ngit commit --amend -CHEAD\n\n#or\n\ngit filter-branch -f --tree-filter 'rm -f /path/to/file' HEAD --all\n\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}